#!/usr/bin/env bash

die() {
    case "$1" in
        i) printf 'INFO: %s\n' "$2" >&2 ;;
        e) printf 'ERROR: %s\n' "$2" >&2 ;;
        w) printf 'WARNING: %s\n' "$2" >&2 ;;
        f) printf 'FATAL: %s\n' "$2" >&2 ;;
        *) printf 'ERROR: Invalid option or format\n' >&2 ;;
    esac
}

# Check pre-requisites
[[ ${BASH_VERSINFO[0]} -gt 3 ]] || {
    die f "Bash version 4 or newer is required. Current version: $BASH_VERSION"
    exit 1
}

jq --version >/dev/null 2>&1 || {
    die f "jq is required. Please install it, then try again."
    exit 1
}

if [[ $(chezmoi data | jq --raw-output '.chezmoi.os') == "windows" ]]; then
    die f "Windows is not supported yet."
    exit 1
fi

NAME="$(basename "$0")"
CHEZMOISOURCE="$(chezmoi source-path)"
PREFIX="$CHEZMOISOURCE/.chezmoitemplates"

[[ $EDITOR ]] || {
    EDITOR="$(chezmoi dump-config | jq --raw-output '.edit.command')"
    EDITOR="${EDITOR:-vi}"
}

change_dir() {
    cd "$1" || {
        die f "Failed to change $1"
        exit 1
    }
}

help() {
    cat <<HERE
Description:
  Manage template files in $CHEZMOISOURCE/.chezmoitemplates
  Use $NAME <subcommand> -h to get help for individual subcommands.

Usage:
  $NAME [options] {add|remove|rename} [options] parameters

Options:
  -h		Show this help message and exit.

Subcommands:
  add		Create a source template file and target templates pointing to it.
  remove	Placeholder
  rename	Placeholder
HERE
}

tmpl::add() {
    local opt OPTIND OPTARG

    usage() {
        cat <<HERE
Description:
  Add template files on $CHEZMOISOURCE/.chezmoitemplates and generate their 
  corresponding template files pointing to the source on the indicated targets.

Usage:
  $NAME [options] add [options] paths

Options:
  -h		Show this help message and exit.

Parameters:
  paths		Space separated list of files as paths
  		The first path should be relative to $CHEZMOISOURCE/.chezmoitemplates,
		it's the source file.
		The remaining items should be relative to $CHEZMOISOURCE and are the target templates.
HERE
    }

    while getopts h opt "$@"; do
        case "$opt" in
            h)
                usage
                exit
                ;;
            ?)
                die e 'add: unknown option.'
                usage >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    [[ $# -gt 1 ]] || {
        die e "add: too few arguments"
        usage >&2
        exit 1
    }

    local message srcfile srctmp REPLY tmplstr targets=()
    srcfile="$PREFIX/$1" srctmp="/tmp/$(date +%s)_$(basename "$srcfile")"
    shift
    targets=("$@")
    $EDITOR "$srctmp"
    tmplstr="{{ template \"${srcfile#"$PREFIX/"}\" . }}"

    message="chezmoi-tmpl: These will be written:

$srcfile:

$(cat "$srctmp")

$(for f in "${targets[@]}"; do
        printf '%s:\n\n%s\n\n' "$f" "$tmplstr"
    done)

Proceed [Y|n]? "

    until [[ $REPLY =~ ^[NYny]$ ]]; do
        read -rp "$message"
        [[ -z $REPLY ]] && break
    done
    if [[ $REPLY =~ ^[Nn]$ ]]; then exit; fi
    cp "$srctmp" "$srcfile"
    for f in "${targets[@]}"; do
        echo "$tmplstr" >"$CHEZMOISOURCE/$f"
    done
}

tmpl::remove() {
    :
}

parse_subcommands() {
    local subcmd="$1"
    shift
    case "$subcmd" in
        add) tmpl::add "$@" ;;
        remove) tmpl::remove "$@" ;;
        *)
            die e "Unknown subcommand or option"
            help >&2
            exit 1
            ;;
    esac
}

main() {
    local opt OPTIND OPTARG
    while getopts h opt "$@"; do
        case "$opt" in
            h)
                help
                exit
                ;;
            ?)
                die e 'Unknown option.'
                help >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    parse_subcommands "$@"
}

# Entry point
main "$@"
